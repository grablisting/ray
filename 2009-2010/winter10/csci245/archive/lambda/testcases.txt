(null? ())
(null? (list 2 3 4))
(null? (zero? 2))
(zero? 0)
(zero? 2)
(car (cdr (list 2 3 4)))
(define x 20)
(define y 10)
(eq? () ())
(eq? (quote xxx) (quote xxx))
(eq? (quote xxx) (quote yyy))
(eq? 5 ())
(begin (set! x 2) x)
(if (null? (eq? () 5)) (+ 2 2) (+ 3 3))
(if (null? (zero? 0)) (+ 3 3) (+ 4 4))
(set! x (cons 2 3))
(set! y (list 2 3 4))
(+ (car x) (car (cdr (cdr y))))
(set! x ())
(null? x)
(set! y 0000000000000)
(zero? y)
(define f
  (lambda (x y) (list y x)))
(f (+ 2 3 4) (quote Hello))

(define map
  (lambda (f ls)
    (if (null? ls)
        ()
        (cons (f (car ls))
              (map f (cdr ls))))))

(define double
  (lambda (x) (* 2 x)))

(map double (list 1 2 3 4 5 6 7 8 9))

(map (lambda (x) (cons x x))
     (list (+ 2 2)
           (quote hello)
           (quote (a b c))))

(define even?
   (lambda (x)
      (if (zero? x) 1
          (odd? (- x 1)))))

(define odd?
   (lambda (x)
      (if (zero? x) ()
          (even? (- x 1)))))

(map even? (list 1 2 3 4 5 6 7))



(define counter
  (lambda (n)
    (lambda ()
      (set! n (+ n 1))
      n)))

(define x (counter 0))
(define y (counter 100))
(define z (counter 100000))

(list (x) (z) (x) (y) (y) (y) (y) (x) (z) (z) (x))

(define fibo1
  (lambda (n)
    (if (zero? n) 1
        (if (zero? (- n 1)) 1
            (+ (fibo1 (- n 1)) (fibo1 (- n 2)))))))

(map fibo1 (list 1 2 3 4 5 6 7 8))

(define fibo2
  (lambda (n)
    (define helper
      (lambda (n a b)
        (if (zero? n) a
            (helper (- n 1) b (+ a b)))))
    (helper n 1 1)))

(map fibo2 (list 1 2 3 4 5 6 7 8))

(fibo2 200)

(define fact
  (lambda (n)
    (if (zero? n) 1
        (* n (fact (- n 1))))))

(fact 200)