;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Scheme HW #4
;
; Ray Peters
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Useful definitions!
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define mySet
  '(10 12 13 145))

(define bigSet
  '((10 12) 13 120 1214 20 1))

(define sub
  '(10 12))

(define alt
  '(1 2))

(define newSet
  '(31 29  120 10))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; memb?
;
; This function returns true if an atom or set, x, can be found in the list, L.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define memb?
  (lambda (x L)
    (cond ((null? L) #F)
          ((and (list? x) (list? (car L)) (set-equal? x (car L))))
          ((eq? x (car L)) #T)
          (else (memb? x (cdr L))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; subset?
;
; This function returns true if every element in one set, child, can be
; found in another set, parent.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define subset?
  (lambda (parent child)
    (cond ((null? child) #T)
          ((memb? (car child) parent) (subset? parent (cdr child)))
          (else #F))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; union
;
; This function combines sets by checking membership of every atom in rhs
; to the set lhs. If it is not a member, it is added to the list.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define union
  (lambda (lhs rhs)
    (cond ((null? rhs) lhs)
          ((memb? (car rhs) lhs) (union lhs (cdr rhs)))
          (else (cons (car rhs) (union lhs (cdr rhs)))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; difference
;
; This function checks for membership of atoms from lhs to the set, rhs. If the
; atom is a member of the rhs, it is excluded from the result.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define difference
  (lambda (lhs rhs)
    (cond ((null? lhs) '())
          ((memb? (car lhs) rhs) (difference (cdr lhs) rhs))
          (else (cons (car lhs) (difference (cdr lhs) rhs))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; intersection
;
; This function checks for membership of lhs' atoms in the set, rhs. If true
; the atom is added to the result.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define intersection
  (lambda (lhs rhs)
    (cond ((null? lhs) '())
          ((memb? (car lhs) rhs) (cons (car lhs) (intersection (cdr lhs) rhs)))
          (else (intersection (cdr lhs) rhs)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; set-equal?
;
; This function checks determines set equality if and only if the lhs is a
; subset of rhs, and the rhs is a subset of the lhs.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define set-equal?
  (lambda (lhs rhs)
    (cond ((and (subset? lhs rhs) (subset? rhs lhs)) #T)
          (else #F))))
